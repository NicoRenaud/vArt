{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"requires_grad"
			],
			[
				"Tns",
				"TensorType"
			],
			[
				"Ten",
				"TensorType"
			],
			[
				"tor",
				"TensorType"
			],
			[
				"ten",
				"_tensor_type_"
			],
			[
				"te",
				"tensor_type"
			],
			[
				"atomic",
				"atomic_number"
			],
			[
				"at",
				"atomic_number"
			],
			[
				"jac",
				"jacobian_ao"
			],
			[
				"grad",
				"gradient"
			],
			[
				"ou",
				"output"
			],
			[
				"da",
				"dao_val"
			],
			[
				"bas_e",
				"bas_exp"
			],
			[
				"get",
				"get_lmn_cart"
			],
			[
				"ang",
				"ang2bohr"
			],
			[
				"Or",
				"OrbitalH2O"
			],
			[
				"hess",
				"hess_f"
			],
			[
				"co",
				"configs"
			],
			[
				"c",
				"configs"
			],
			[
				"a",
				"atoms_str"
			],
			[
				"ato",
				"atoms_str"
			],
			[
				"obs",
				"obs_dict"
			],
			[
				"o",
				"obs_dict"
			],
			[
				"distributed",
				"distributed_training"
			],
			[
				"d",
				"distributed"
			],
			[
				"maste",
				"master_port"
			],
			[
				"mas",
				"master_port"
			],
			[
				"master",
				"master_address"
			],
			[
				"resa",
				"resample_from_last"
			],
			[
				"distr",
				"dist_train"
			],
			[
				"retur",
				"return_vals"
			],
			[
				"ret",
				"return_vals"
			],
			[
				"r",
				"requires_grad"
			],
			[
				"deepQC",
				"DeepQMC"
			],
			[
				"opt",
				"opt_freeze"
			],
			[
				"gto",
				"gto_cart"
			],
			[
				"bas",
				"basis"
			],
			[
				"rad",
				"radial_gausian_cart"
			],
			[
				"nor",
				"norm_cst"
			],
			[
				"l",
				"lmn_cart"
			],
			[
				"bas_",
				"bas_n"
			],
			[
				"norm",
				"norm_dict"
			],
			[
				"bas_co",
				"bas_coeffs"
			],
			[
				"radial",
				"radial_dict"
			],
			[
				"ra",
				"radial_slater"
			],
			[
				"elec",
				"electron_shells"
			],
			[
				"_gt",
				"_get_sto_atomic_data"
			],
			[
				"angular",
				"angular_momentum"
			],
			[
				"ec",
				"electron_shells"
			],
			[
				"ele",
				"electron_shells"
			],
			[
				"XY",
				"XYtmp"
			],
			[
				"number",
				"number_orb"
			],
			[
				"all",
				"all_bas_names"
			],
			[
				"index",
				"index_ctr"
			],
			[
				"basis",
				"basis_type"
			],
			[
				"gra",
				"grad_output"
			],
			[
				"save",
				"save_for_backward"
			],
			[
				"mo",
				"mo_coeff"
			],
			[
				"pysc",
				"pyscf_basis"
			],
			[
				"pos",
				"pos_curve"
			],
			[
				"atom",
				"atom_coords"
			],
			[
				"ne",
				"nshells"
			],
			[
				"sing",
				"single_point"
			],
			[
				"epc",
				"epoch"
			],
			[
				"sav",
				"save_checkpoint"
			],
			[
				"sa",
				"sampler_ham"
			],
			[
				"ini",
				"initiaize"
			],
			[
				"eps",
				"epsilon"
			],
			[
				"con",
				"configs"
			],
			[
				"k",
				"kinetic_energy_autograd"
			],
			[
				"kin",
				"kinetic"
			],
			[
				"Jas",
				"JastrowFunction"
			],
			[
				"fact",
				"factors_downdown"
			],
			[
				"fac",
				"factors_upup"
			],
			[
				"fat",
				"factors_upup"
			],
			[
				"nele",
				"nelec1"
			],
			[
				"n",
				"nwalkers"
			],
			[
				"kine",
				"kinetic_energy"
			],
			[
				"nuc",
				"nuclear_repulsion"
			],
			[
				"ce",
				"centers"
			],
			[
				"resam",
				"resampling"
			],
			[
				"plot",
				"plot_wf_1d"
			],
			[
				"de",
				"denom"
			],
			[
				"show",
				"show_plot"
			],
			[
				"spa",
				"spacing_vals"
			],
			[
				"meh",
				"method"
			],
			[
				"regu",
				"regular_mesh_3d"
			],
			[
				"sigm",
				"sigma_method"
			],
			[
				"ge",
				"get_sigma_ones"
			],
			[
				"si",
				"sigma_method"
			],
			[
				"new",
				"new_fc_weight"
			],
			[
				"m",
				"modify_grid"
			],
			[
				"inte",
				"interval_min"
			],
			[
				"inter",
				"interval_min"
			],
			[
				"bo",
				"bool_min"
			],
			[
				"default",
				"default_loss"
			],
			[
				"in",
				"input_features"
			],
			[
				"inv",
				"invCov"
			],
			[
				"inp",
				"input_features"
			],
			[
				"cur",
				"curvature_loss_function"
			],
			[
				"am",
				"amplitude_1d"
			],
			[
				"local",
				"local_energy"
			],
			[
				"loca",
				"local_energy"
			],
			[
				"loa",
				"local_energy"
			],
			[
				"we",
				"weight"
			],
			[
				"Pa",
				"Parameter"
			],
			[
				"he",
				"hessian"
			],
			[
				"out",
				"output_features"
			],
			[
				"i",
				"input_features"
			],
			[
				"ndim",
				"ndim_tot"
			],
			[
				"var",
				"variance"
			],
			[
				"init",
				"init_pos"
			],
			[
				"ga",
				"grad_weight"
			],
			[
				"stat",
				"static_weight"
			],
			[
				"index_",
				"index_up"
			],
			[
				"ci",
				"ci_coeffs"
			],
			[
				"sec",
				"select_configuration_updown_singlet"
			],
			[
				"confs_",
				"confs_spin_up"
			],
			[
				"confs_sp",
				"confs_spin_up"
			],
			[
				"nr",
				"norb_"
			],
			[
				"gr",
				"ground_state"
			],
			[
				"der",
				"deriv_ao"
			],
			[
				"for",
				"forward"
			],
			[
				"laye",
				"layer_ao"
			],
			[
				"NE",
				"NEURAL_PYSCF_WF"
			],
			[
				"nw",
				"nwalker"
			],
			[
				"fo",
				"forward"
			],
			[
				"aci",
				"active_space"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import inspect\nimport numpy as np \n\nimport torch\nfrom torch import nn\nfrom torch.autograd import Variable\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\n\nfrom vart.solver.solver_base import SolverBase\nfrom vart.solver.torch_utils import DataSet, Loss, ZeroOneClipper\n\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D \nfrom tqdm import tqdm\nimport time\n\nclass SolverRepo(SolverBase):\n\n    def __init__(self, \n                 net=None, \n                 sampler=None, \n                 optimizer=None,\n                 scheduler=None):\n        SolverBase.__init__(self,net,sampler,optimizer)\n        self.scheduler = scheduler\n\n        #esampling\n        self.resampling(ntherm=-1, resample=100,resample_from_last=True, resample_every=1)\n\n        # observalbe\n        self.observable(['local_energy'])\n\n    def run(self,nepoch, batchsize=None, save='model.pth',  loss='variance', plot = None):\n\n        '''Train the model.\n\n        Arg:\n            nepoch : number of epoch\n            batchsize : size of the minibatch, if None take all points at once\n            pos : presampled electronic poition\n            obs_dict (dict, {name: []} ) : quantities to be computed during the training\n                                           'name' must refer to a method of the Solver instance\n            ntherm : thermalization of the MC sampling. If negative (-N) takes the last N entries\n            resample : number of MC step during the resampling\n            resample_from_last (bool) : if true use the previous position as starting for the resampling\n            resample_every (int) : number of epch between resampling\n            loss : loss used ('energy','variance' or callable (for supervised)\n            plot : None or plotter instance from plot_utils.py to interactively monitor the training\n        '''\n\n        # checkpoint file\n        self.save_model = save\n\n        # sample the wave function\n        pos = self.sample(ntherm=self.resample.ntherm)\n\n        # determine the batching mode\n        if batchsize is None:\n            batchsize = len(pos)\n\n        # change the number of steps\n        _nstep_save = self.sampler.nstep\n        self.sampler.nstep = self.resample.resample\n\n        # create the data loader\n        self.dataset = DataSet(pos)\n        self.dataloader = DataLoader(self.dataset,batch_size=batchsize)\n\n        # get the loss\n        self.loss = Loss(self.wf,method=loss)\n                \n        # clipper for the fc weights\n        clipper = ZeroOneClipper()\n    \n        cumulative_loss = []\n        min_loss = 1E3\n\n        for n in range(nepoch):\n            print('----------------------------------------')\n            print('epoch %d' %n)\n\n            cumulative_loss = 0\n            for data in self.dataloader:\n                \n                lpos = Variable(data).float()\n                lpos.requires_grad = True\n\n                loss = self.loss(lpos)\n                cumulative_loss += loss\n\n                self.opt.zero_grad()\n                loss.backward()\n                self.opt.step()\n\n                if self.wf.fc.clip:\n                    self.wf.fc.apply(clipper)\n                \n            if plot is not None:\n                plot.drawNow()\n\n            if cumulative_loss < min_loss:\n                min_loss = self.save_checkpoint(n,cumulative_loss,self.save_model)\n                 \n            # get the observalbes\n            self.get_observable(self.obs_dict,pos)\n            print('loss %f' %(cumulative_loss))\n            print('variance : %f' %np.var(self.obs_dict['local_energy'][-1]))\n            print('energy : %f' %np.mean(self.obs_dict['local_energy'][-1]) )   \n            print('----------------------------------------')\n            \n            # resample the data\n            if (n%self.resample.resample_every == 0) or (n == nepoch-1):\n                if self.resample.resample_from_last:\n                    pos = pos.clone().detach()\n                else:\n                    pos = None\n                pos = self.sample(pos=pos,ntherm=self.resample.ntherm,with_tqdm=False)\n                self.dataloader.dataset.data = pos\n\n            if self.scheduler is not None:\n                self.scheduler.step()\n\n        #restore the sampler number of step\n        self.sampler.nstep = _nstep_save\n\n\n\n\n",
			"file": "vart/solver/solver_repro.py",
			"file_size": 4285,
			"file_write_time": 132125896137206245,
			"settings":
			{
				"buffer_size": 4330,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/repo.py",
			"settings":
			{
				"buffer_size": 953,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "vart/network/rbf.py",
			"settings":
			{
				"buffer_size": 3219,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "vart/network/nn_repro.py",
			"settings":
			{
				"buffer_size": 2223,
				"line_ending": "Unix"
			}
		},
		{
			"file": "vart/network/nn_base.py",
			"settings":
			{
				"buffer_size": 5090,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clan",
				"Clang Format: Format Selection"
			],
			[
				"cla",
				"Clang Format: Format Selection"
			],
			[
				"cl",
				"Clang Format: Format Selection"
			],
			[
				"CL",
				"Clang Format: Format Selection"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/nicolas/Documents/projects/vArt",
		"/home/nicolas/Documents/projects/vArt/vart"
	],
	"file_history":
	[
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/test_ao.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/config.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/wf_orbital.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/config.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/h2o.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/sampler/sampler_base.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/sampler/metropolis.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/h2.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/solver/solver_orbital_distributed.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/wf_base.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/utils/distributed.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_h2_sto.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_morse.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/slater_pooling.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/mesh_utils.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_h2_AO.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/solver/distributed_solver_base.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/solver/deepqmc.py",
		"/home/nicolas/Documents/projects/deeprank/pdb2sql/test/test_structureSimilarity.py",
		"/home/nicolas/Documents/projects/deeprank/pdb2sql/pdb2sql/StructureSimilarity.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/sampler/hamiltonian.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/tests/test_ho1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_h2_sto.py",
		"/home/nicolas/Documents/tutorial/mayavi/chemistry.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/solver/plot_mol.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/wf_potential.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/sampler/pymc3.py",
		"/home/nicolas/Documents/tutorial/mayavi/h2o-elf.cube",
		"/home/nicolas/Documents/tutorial/pyglet/hello.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/tests/test_h2_rbf.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_h2_rbf.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_h2.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_h2plus_v2.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_h2plus.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/example/nn_hydrogen.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/wf_pinbox.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/wave_modules.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/batch_determinant.py",
		"/home/nicolas/Documents/projects/QMC/DeepQMC/deepqmc/wavefunction/slater_orbitals.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/mesh.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/ho1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/wf_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/orbital_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/rbf.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/hydrogen.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/h2plus.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/walkers.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/metropolis.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/solver_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/neural_wf_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_hydrogen.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/deepqmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/plot.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_h2_rbf.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/neural_pyscf_wf_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_pyscf.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/wave_modules.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/molecule.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/atomic_orbitals.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/slater_orbitals.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/setup.cfg",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_nn_ho1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_ho1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/.travis.yml",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/setup.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/hamiltonian.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/spherical_harmonics.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_nn_h2_rbf.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/wf_pyscf.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_ho1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_h2_AO.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/torch_utils.py",
		"/home/nicolas/Documents/projects/trace_clustering/grust/grust/DataLoader.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_nn_hydrogen.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_h2.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/h2.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_h2plus_v2.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_h2plus.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_ho2d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/ho2d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_h2plus_1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/pymc3.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/deepqmc_mol.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/sampler_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/refine_mesh.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_morse.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/morse1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_double_well.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/deepqmc1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/vmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/nn_wf_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/dqmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/dqmc_mol.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/neural_net.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/PointNet.py",
		"/home/nicolas/Documents/tutorial/pytorch/pyscf_ao_function.py",
		"/home/nicolas/Documents/tutorial/pytorch/own_func.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/ho3d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/sand_box.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/h2o.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_ho3d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/linear.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/swarm.py",
		"/home/nicolas/Documents/tutorial/pyswarm/test.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/minimize.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_lint.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/jastrow.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/.eggs/Sphinx-2.0.1-py3.7.egg/sphinx/themes/basic/static/jquery-3.2.1.js",
		"/home/nicolas/Documents/projects/QMC/rbm_ansatz.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/opt_base.py",
		"/home/nicolas/Documents/tutorial/autograd/test.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/diffusion.py",
		"/home/nicolas/Documents/pyscf/pyscf/lib/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/xtp/CMakeLists.txt",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/dmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/README.md",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/requirements.txt",
		"/home/nicolas/Documents/tutorial/pyhmc/test.py",
		"/home/nicolas/Documents/tutorial/pyMC3/test.py",
		"/home/nicolas/Documents/tutorial/pyMC3/tesa",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/vmc/vmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/dmc/dmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/diffuser/diffuser.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/test.py",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries_tol_normal_update_safe_matrix_free/read_mem.py",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/property.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/qmstate.h"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "vart/solver/solver_repro.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4330,
						"regions":
						{
						},
						"selection":
						[
							[
								106,
								106
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "test/repo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 953,
						"regions":
						{
						},
						"selection":
						[
							[
								952,
								952
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "vart/network/rbf.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3219,
						"regions":
						{
						},
						"selection":
						[
							[
								2887,
								2887
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 41.0,
						"translation.y": 1050.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "vart/network/nn_repro.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2223,
						"regions":
						{
						},
						"selection":
						[
							[
								225,
								225
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "vart/network/nn_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5090,
						"regions":
						{
						},
						"selection":
						[
							[
								537,
								537
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 26.0
	},
	"pinned_build_system": "",
	"project": "vart.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"h2",
				"example/h2o.py"
			],
			[
				"wa",
				"deepqmc/sampler/walkers.py"
			],
			[
				"sam",
				"deepqmc/sampler/sampler_base.py"
			],
			[
				"metr",
				"deepqmc/sampler/metropolis.py"
			],
			[
				"wf_base",
				"deepqmc/wavefunction/wf_base.py"
			],
			[
				"h2o",
				"example/h2o.py"
			],
			[
				"Sl",
				"deepqmc/wavefunction/slater_pooling.py"
			],
			[
				"wf_bas",
				"deepqmc/wavefunction/wf_base.py"
			],
			[
				"sp",
				"deepqmc/wavefunction/spherical_harmonics.py"
			],
			[
				"sla",
				"deepqmc/wavefunction/slater_pooling.py"
			],
			[
				"ho2",
				"example/h2o.py"
			],
			[
				"wf_b",
				"deepqmc/wavefunction/wf_base.py"
			],
			[
				"mol",
				"deepqmc/wavefunction/molecule.py"
			],
			[
				"h",
				"example/h2o.py"
			],
			[
				"tes",
				"example/test_ao.py"
			],
			[
				"wf_or",
				"deepqmc/wavefunction/wf_orbital.py"
			],
			[
				"sph",
				"deepqmc/wavefunction/spherical_harmonics.py"
			],
			[
				"a",
				"deepqmc/wavefunction/atomic_orbitals.py"
			],
			[
				"at",
				"deepqmc/wavefunction/atomic_orbitals.py"
			],
			[
				"h2.p",
				"example/h2.py"
			],
			[
				"water",
				"example/water.xyz"
			],
			[
				"h2.",
				"example/h2.py"
			],
			[
				"mo",
				"deepqmc/wavefunction/molecule.py"
			],
			[
				"m",
				"deepqmc/wavefunction/molecule.py"
			],
			[
				"wf_o",
				"deepqmc/wavefunction/wf_orbital.py"
			],
			[
				"h2o.",
				"example/h2o.py"
			],
			[
				"wf_",
				"deepqmc/wavefunction/wf_orbital.py"
			],
			[
				"wf",
				"deepqmc/wavefunction/wf_base.py"
			],
			[
				"plo",
				"deepqmc/solver/plot_orbital.py"
			],
			[
				"Sla",
				"deepqmc/wavefunction/slater_pooling.py"
			],
			[
				"ho1",
				"example/ho1d.py"
			],
			[
				"slater",
				"deepqmc/wavefunction/slater_pooling.py"
			],
			[
				"hess",
				"example/hess_simple.py"
			],
			[
				"hes",
				"example/hess.py"
			],
			[
				"wf_ba",
				"deepqmc/wavefunction/wf_base.py"
			],
			[
				"sol",
				"deepqmc/solver/solver_base.py"
			],
			[
				"nn",
				"example/nn_morse.py"
			],
			[
				"rb",
				"deepqmc/wavefunction/rbf.py"
			],
			[
				"solve",
				"deepqmc/solver/solver_base.py"
			],
			[
				"ho",
				"example/ho1d.py"
			],
			[
				"wf_p",
				"deepqmc/wavefunction/wf_potential.py"
			],
			[
				"wf_po",
				"deepqmc/wavefunction/wf_potential.py"
			],
			[
				"un",
				"untitled"
			],
			[
				"pote",
				"deepqmc/solver/solver_potential.py"
			],
			[
				"plot",
				"deepqmc/solver/plot_data.py"
			],
			[
				"sovler_or",
				"deepqmc/solver/solver_orbital.py"
			],
			[
				"solv",
				"deepqmc/solver/solver_potential.py"
			],
			[
				"solver",
				"deepqmc/solver/solver_base.py"
			],
			[
				"saml",
				"deepqmc/sampler/sampler_base.py"
			],
			[
				"orb",
				"deepqmc/wavefunction/atomic_orbitals.py"
			],
			[
				"ja",
				"deepqmc/wavefunction/jastrow.py"
			],
			[
				"Wa",
				"deepqmc/sampler/walkers.py"
			],
			[
				"wal",
				"deepqmc/sampler/walkers.py"
			],
			[
				"R",
				"README.md"
			],
			[
				"plot_d",
				"deepqmc/solver/plot_data.py"
			],
			[
				"pot",
				"deepqmc/wavefunction/wf_potential.py"
			],
			[
				"nn_h2",
				"example/nn_h2_AO.py"
			],
			[
				"plot_m",
				"deepqmc/solver/plot_mol.py"
			],
			[
				"che",
				"~/Documents/tutorial/mayavi/chemistry.py"
			],
			[
				"nn_h2_",
				"example/nn_h2_AO.py"
			],
			[
				"ho1d",
				"example/ho1d.py"
			],
			[
				"dee",
				"deepqmc/solver/deepqmc.py"
			],
			[
				"mes",
				"deepqmc/wavefunction/mesh_utils.py"
			],
			[
				"sl",
				"~/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/slater_orbitals.py"
			],
			[
				"rbf",
				"~/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/rbf.py"
			],
			[
				"pl",
				"~/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/plot.py"
			],
			[
				"nn_ho1",
				"~/Documents/projects/QMC/pyCHAMP/example/nn_ho1d.py"
			],
			[
				"test_nn",
				"tests/test_nn_ho1d.py"
			],
			[
				"tet_nn",
				"tests/test_nn_ho1d.py"
			],
			[
				"nn_hy",
				"example/nn_hydrogen.py"
			],
			[
				"test",
				"tests/test_ho1d.py"
			],
			[
				".tr",
				".travis.yml"
			],
			[
				"set",
				"setup.cfg"
			],
			[
				"ha",
				"pyCHAMP/sampler/hamiltonian.py"
			],
			[
				"ham",
				"pyCHAMP/sampler/hamiltonian.py"
			],
			[
				"nn_h2p",
				"example/nn_h2plus_v2.py"
			],
			[
				"mey",
				"pyCHAMP/sampler/metropolis.py"
			],
			[
				"neur",
				"pyCHAMP/wavefunction/neural_pyscf_wf_base.py"
			],
			[
				"neu",
				"pyCHAMP/wavefunction/neural_wf_base.py"
			],
			[
				"hy",
				"example/hydrogen.py"
			],
			[
				"me",
				"pyCHAMP/sampler/metropolis.py"
			],
			[
				"h2p",
				"example/nn_h2plus.py"
			],
			[
				"",
				"pyCHAMP/wavefunction/neural_wf_base.py"
			],
			[
				"h2pl",
				"example/h2plus.py"
			],
			[
				"nn_ho",
				"example/nn_ho2d.py"
			],
			[
				"nn_m",
				"example/nn_morse.py"
			],
			[
				"nnh",
				"example/nn_ho1d.py"
			],
			[
				"vm",
				"pyCHAMP/solver/vmc.py"
			],
			[
				"waf",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				"Po",
				"pyCHAMP/optimizer/PointNet.py"
			],
			[
				"neua",
				"pyCHAMP/wavefunction/neural_pyscf_wf_base.py"
			],
			[
				"ne",
				"pyCHAMP/solver/neural_net.py"
			],
			[
				"mi",
				"pyCHAMP/optimizer/minimize.py"
			],
			[
				"ho3d",
				"example/ho3d.py"
			],
			[
				"sa",
				"example/sand_box.py"
			],
			[
				"pysc",
				"pyCHAMP/wavefunction/wf_pyscf.py"
			],
			[
				"neru",
				"pyCHAMP/wavefunction/neural_wf_base.py"
			],
			[
				"neura",
				"pyCHAMP/solver/neural_net.py"
			],
			[
				"mtr",
				"pyCHAMP/sampler/metropolis.py"
			],
			[
				"ho3",
				"example/ho3d.py"
			],
			[
				"mini",
				"pyCHAMP/optimizer/minimize.py"
			],
			[
				"opt",
				"pyCHAMP/optimizer/opt_base.py"
			],
			[
				"pys",
				"pyCHAMP/wavefunction/wf_pyscf.py"
			],
			[
				"wf_pys",
				"pyCHAMP/wavefunction/wf_pyscf.py"
			],
			[
				"min",
				"pyCHAMP/optimizer/minimize.py"
			],
			[
				"w",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				"nf",
				"~/Documents/tutorial/pyMC3/nf.py"
			],
			[
				"ho\t",
				"example/ho3d.py"
			],
			[
				"vmc",
				"pyCHAMP/solver/vmc.py"
			],
			[
				"lin",
				"pyCHAMP/optimizer/linear.py"
			],
			[
				"so",
				"pyCHAMP/solver/solver_base.py"
			],
			[
				"op",
				"pyCHAMP/optimizer/opt_base.py"
			],
			[
				"di",
				"pyCHAMP/sampler/diffusion.py"
			],
			[
				"test_bse",
				"xtp/src/tests/test_bse.cc"
			],
			[
				"davids",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"da",
				"xtp/src/libxtp/davidsonsolver.cc"
			],
			[
				"bse.cc",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"qmsta",
				"xtp/include/votca/xtp/qmstate.h"
			],
			[
				"bse.c",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"orbitals",
				"ctp/include/votca/ctp/orbitals.h"
			],
			[
				"test_d",
				"xtp/src/tests/test_davidson.cc"
			],
			[
				"dav",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"test_bs",
				"xtp/src/tests/test_bse_operator.cc"
			],
			[
				"matr",
				"xtp/src/libxtp/matrixfreeoperator.cc"
			],
			[
				"gw",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			],
			[
				"bse",
				"xtp/include/votca/xtp/bse.h"
			],
			[
				"bse_op",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				"bse_",
				"xtp/src/libxtp/gwbse/bse_operator.cc"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/projects/ElementalJacobiDavidson/eldav.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 214.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
